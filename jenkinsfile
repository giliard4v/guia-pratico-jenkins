pipeline {
  agent any

  environment {
    DOCKER_IMAGE = "giliardvieira/labjenkins:${env.BUILD_ID}"
    SONAR_HOST_URL = "http://localhost:9000"
    SONAR_PROJECT_KEY = "labjenkins"
  }

  stages {
    stage('Build Docker Image') {
      steps {
        script {
          docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
            def dockerapp = docker.build("${DOCKER_IMAGE}", "-f src/Dockerfile src")
            dockerapp.push()
            dockerapp.push("${env.BUILD_ID}")
          }
        }
      }
    }

    stage('SonarQube Analysis') {
      environment {
        SONAR_AUTH_TOKEN = credentials('sonarqube-token')
      }
      steps {
        withSonarQubeEnv('SonarQube') {
          sh """
            sonar-scanner \
              -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
              -Dsonar.sources=src \
              -Dsonar.host.url=${SONAR_HOST_URL} \
              -Dsonar.login=${SONAR_AUTH_TOKEN}
          """
        }
      }
    }

    stage('Quality Gate') {
      steps {
        timeout(time: 1, unit: 'MINUTES') {
          waitForQualityGate abortPipeline: true
        }
      }
    }

    stage('Push Docker Image') {
      steps {
        script {
          docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
            def dockerapp = docker.image("${DOCKER_IMAGE}")
            dockerapp.push('latest')
            dockerapp.push("${env.BUILD_ID}")
          }
        }
      }
    }

    stage('Deploy no Kubernetes') {
      steps {
        sh 'echo "Executando o comando kubectl apply"'
      }
    }
  }
}


